import express from "express";
import axios from "axios";
import jwt from "jsonwebtoken";
import User from "../Models/User"

const router = express.Router();

router.get("/linkedinredirect", async (req, res) => {
  const code = req.query.code;

  if (!code) {
    return res.status(400).json({ error: "No code provided" });
  }

  try {
    // Step 1: Exchange code for access token
    const tokenRes = await axios.post(
      "https://www.linkedin.com/oauth/v2/accessToken",
      null,
      {
        params: {
          grant_type: "authorization_code",
          code: code,
          redirect_uri: "http://localhost:3000/api/linkedinredirect", // must match LinkedIn app settings
          client_id: process.env.LINKEDIN_CLIENT_ID,
          client_secret: process.env.LINKEDIN_CLIENT_SECRET,
        },
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
      }
    );

    const accessToken = tokenRes.data.access_token;

    // Step 2: Fetch user profile
    const profileRes = await axios.get(
      "https://api.linkedin.com/v2/userinfo",
      {
        headers: { Authorization: `Bearer ${accessToken}` },
      }
    );

    const emailRes = await axios.get(
      "https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))",
      {
        headers: { Authorization: `Bearer ${accessToken}` },
      }
    );

    const linkedinId = profileRes.data.id;
    const fullName = profileRes.data.localizedFirstName + " " + profileRes.data.localizedLastName;
    const email = emailRes.data.elements[0]["handle~"].emailAddress;

    // Step 3: Save or update user
    let user = await User.findOne({ linkedinId });
    if (!user) {
      user = new User({ linkedinId, fullName, email });
      await user.save();
    }

    // Step 4: Generate JWT
    const token = jwt.sign(
      { id: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: "10h" }
    );

    // Step 5: Redirect to frontend with token
    res.redirect(`http://localhost:3000/dashboard?token=${token}`);

  } catch (err) {
    console.error("LinkedIn login error:", err.response?.data || err.message);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

export default router;
