const express = require('express');
const Post = require('../Models/Post.model'); // Ensure correct path and case
const User = require('../Models/User'); // Import User model
const jwt = require('jsonwebtoken');
const router = express.Router();
router.use(express.json());
const axios = require('axios');

// Middleware to verify JWT and check user existence
const authenticateJWT = async (req, res, next) => {
  try {
    // Extract token from Authorization header (Bearer <token>)
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ message: 'No token provided or invalid format' });
    }

    const token = authHeader.split(' ')[1];
    
    // Verify JWT token
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'supersecret');
    
    // Find user in database using decoded user ID
    const user = await User.findById(decoded.id);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Attach user to request for use in routes
    req.user = user;
    next();
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ message: 'Token expired' });
    }
    return res.status(401).json({ message: 'Invalid token' });
  }
};

// GET all posts (protected)
router.get("/posts", authenticateJWT, async (req, res) => {
  console.log("User from token:", req.user);

  try {
    const posts = await Post.find({});
    console.log("Posts fetched:", posts.length);
    res.status(200).json(posts);
  } catch (error) {
    console.error("Error fetching posts:", error.message);
    res.status(500).json({ message: error.message });
  }
});
// saves

//POSTNOW!
//DELETE POST BY ID
router.delete("/deletepost/:id", authenticateJWT, async (req, res) => {
  try {
    const { id } = req.params;
    const post = await Post.findById(id);

    if (!post) {
      return res.status(404).json({ message: "Post not found" });
    }

    await Post.deleteOne({ _id: id });
    res.status(200).json({ message: "Post deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});
router.post("/linkedin/postnow",authenticateJWT, async (req, res) => {
  try {
    const { title, content, hashtags, imageUrl } = req.body;

    const accessToken = req.user.linkedinAccessToken; // store securely
    const author = `urn:li:organization:${process.env.companyORN}`;

    let asset = null;

    // If image provided, upload it to LinkedIn
    if (imageUrl) {
      // Step 1: Register upload
      const registerRes = await axios.post(
        "https://api.linkedin.com/v2/assets?action=registerUpload",
        {
          registerUploadRequest: {
            owner: author,
            recipes: ["urn:li:digitalmediaRecipe:feedshare-image"],
            serviceRelationships: [
              {
                identifier: "urn:li:userGeneratedContent",
                relationshipType: "OWNER",
              },
            ],
          },
        },
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json",
          },
        }
      );

      const uploadUrl =
        registerRes.data.value.uploadMechanism[
          "com.linkedin.digitalmedia.uploading.MediaUploadHttpRequest"
        ].uploadUrl;

      asset = registerRes.data.value.asset;

      // Step 2: Upload image bytes
      const imageRes = await axios.get(imageUrl, { responseType: "arraybuffer" });
      await axios.put(uploadUrl, imageRes.data, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "image/png", // adjust depending on your file
        },
      });
    }

    // Step 3: Create post
    const postRes = await axios.post(
      "https://api.linkedin.com/v2/ugcPosts",
      {
        author,
        lifecycleState: "PUBLISHED",
        specificContent: {
          "com.linkedin.ugc.ShareContent": {
            shareCommentary: {
              text: `${content}\n\n${hashtags}`,
            },
            shareMediaCategory: asset ? "IMAGE" : "NONE",
            media: asset
              ? [
                  {
                    status: "READY",
                    description: { text: title },
                    media: asset,
                    title: { text: title },
                  },
                ]
              : [],
          },
        },
        visibility: {
          "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC",
        },
      },
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json",
        },
      }
    );

    res.json({ success: true, linkedinPost: postRes.data });
  } catch (err) {
    console.error("LinkedIn post error:", err.response?.data || err.message);
    res.status(500).json({ error: err.response?.data || err.message });
  }
});

module.exports = router

